// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PrayerTimeServiceClient is the client API for PrayerTimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrayerTimeServiceClient interface {
	GetPrayerTime(ctx context.Context, in *GetPrayerTimeRequest, opts ...grpc.CallOption) (*GetPrayerTimeResponse, error)
}

type prayerTimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPrayerTimeServiceClient(cc grpc.ClientConnInterface) PrayerTimeServiceClient {
	return &prayerTimeServiceClient{cc}
}

func (c *prayerTimeServiceClient) GetPrayerTime(ctx context.Context, in *GetPrayerTimeRequest, opts ...grpc.CallOption) (*GetPrayerTimeResponse, error) {
	out := new(GetPrayerTimeResponse)
	err := c.cc.Invoke(ctx, "/prayer.muslim.v1.PrayerTimeService/GetPrayerTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PrayerTimeServiceServer is the server API for PrayerTimeService service.
// All implementations should embed UnimplementedPrayerTimeServiceServer
// for forward compatibility
type PrayerTimeServiceServer interface {
	GetPrayerTime(context.Context, *GetPrayerTimeRequest) (*GetPrayerTimeResponse, error)
}

// UnimplementedPrayerTimeServiceServer should be embedded to have forward compatible implementations.
type UnimplementedPrayerTimeServiceServer struct {
}

func (UnimplementedPrayerTimeServiceServer) GetPrayerTime(context.Context, *GetPrayerTimeRequest) (*GetPrayerTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrayerTime not implemented")
}

// UnsafePrayerTimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrayerTimeServiceServer will
// result in compilation errors.
type UnsafePrayerTimeServiceServer interface {
	mustEmbedUnimplementedPrayerTimeServiceServer()
}

func RegisterPrayerTimeServiceServer(s grpc.ServiceRegistrar, srv PrayerTimeServiceServer) {
	s.RegisterService(&PrayerTimeService_ServiceDesc, srv)
}

func _PrayerTimeService_GetPrayerTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPrayerTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrayerTimeServiceServer).GetPrayerTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/prayer.muslim.v1.PrayerTimeService/GetPrayerTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrayerTimeServiceServer).GetPrayerTime(ctx, req.(*GetPrayerTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PrayerTimeService_ServiceDesc is the grpc.ServiceDesc for PrayerTimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PrayerTimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "prayer.muslim.v1.PrayerTimeService",
	HandlerType: (*PrayerTimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPrayerTime",
			Handler:    _PrayerTimeService_GetPrayerTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prayer/muslim/v1/time.proto",
}
